require "gauge"


-------------------------------------------------------------------------------
function printf(fmt, ...)
  io.stdout:write(string.format(fmt, ...))
end

local function clovF(U, i,j)
   local Ujp = U[j]:shift(i - 1, "from_forward")
   local Uipx = U[i]:shift(j - 1, "from_forward"):adjoin()
   local Sl = U[j]:adjoin() * U[i] * Ujp
   local C01 = Sl * Uipx  -- at (0,1)
   local C11 = Uipx * Sl  -- at (1,1)
   local Su = Ujp * Uipx * U[j]:adjoin()
   local C00 = U[i] * Su -- at (0,0)
   local C10 = Su * U[i] -- at (1,0)
   local F = C00 +
      C01:shift(j - 1, "to_forward") +
   (C10 + C11:shift(j - 1, "to_forward")):shift(i - 1, "to_forward")
return (F - F:adjoin()) / complex(0,8)
end

function clover_std(U, kappa, c_sw_space, c_sw_time, F)
   local X = F;
   local L = U[1].lattice
   
   for i = 0, #L - 2 do
      X = X - kappa * 
         ((1-gamma{mu=i}) * (U[i+1] * (F:shift(i, "from_forward"))) + (
             (1+gamma{mu=i}) * ((U[i+1]:adjoin() * F):shift(i, "from_backward"))))
   end
   
   -- antiperiodic bc in d=3 !!!
   local U4 = U[#L]:copy()
   L:Subset{axis=#L-1, position=L[#L-1]-1}:where(function () U4:set(-U[#L]) end)
   X = X - kappa * 
      ((1-gamma{mu=#L-1}) * (U4 * (F:shift(#L-1, "from_forward"))) +
       (1+gamma{mu=#L-1}) * ((U4:adjoin() * F):shift(#L-1, "from_backward")))
   
   for i = 1, (#L - 1) do
      for j = i + 1, (#L - 1) do
         X = X - kappa * c_sw_space * clovF(U,i,j) * (
            (gamma{mu=i-1} * gamma{mu=j-1}) * complex(0,1) * F)
      end
   end
   for i = 1, (#L - 1) do
      for j = #L,#L do
         X = X - kappa * c_sw_time * clovF(U,i,j) * (
            (gamma{mu=i-1} * gamma{mu=j-1}) * complex(0,1) * F)
      end
   end

  return X
end

-------------------------------------------------------------------------------
printf("defined reference clover operator clover_std(U, kappa, c_sw_space, s_sw_time, f)\n");
